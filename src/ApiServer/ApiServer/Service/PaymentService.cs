using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using MongoDB.Driver;
using WomPlatform.Web.Api.DatabaseDocumentModels;

namespace WomPlatform.Web.Api.Service {

    public class PaymentService : BaseService {

        private readonly int DefaultAutogeneratedPasswordLength;
        private readonly int DefaultSecretLength;
        private readonly int RequestInitialAttempts;

        public PaymentService(
            MongoClient client,
            IConfiguration configuration,
            ILogger<BackupService> logger
        ) : base(client, logger) {

            var confSection = configuration.GetSection("PasswordSecurity");
            DefaultAutogeneratedPasswordLength = Convert.ToInt32(confSection["AutogeneratedLength"]);
            DefaultSecretLength = Convert.ToInt32(confSection["SecretLength"]);
            RequestInitialAttempts = Convert.ToInt32(confSection["RequestInitialAttempts"]);
        }

        private IMongoCollection<PaymentRequest> PaymentRequestCollection {
            get {
                return MainDatabase.GetCollection<PaymentRequest>("PaymentRequests");
            }
        }

        /// <summary>
        /// Retrieves a list of all persistent payments.
        /// </summary>
        public Task<List<PaymentRequest>> GetPersistentPayments() {
            var filter = Builders<PaymentRequest>.Filter.And(
                Builders<PaymentRequest>.Filter.Eq(pr => pr.Verified, true),
                Builders<PaymentRequest>.Filter.Eq(pr => pr.IsPersistent, true)
            );

            return PaymentRequestCollection.Find(filter).ToListAsync();
        }

        /// <summary>
        /// Create a new payment request.
        /// </summary>
        /// <param name="pointOfService">Owning POS instance.</param>
        /// <param name="amount">Amount of WOM vouchers request for the payment.</param>
        /// <param name="filter">Filter that WOM vouchers must satisfy.</param>
        /// <param name="nonce">Optional nonce value.</param>
        /// <param name="ackUrlPocket">Optional ack URL for the Pocket app.</param>
        /// <param name="ackUrlPos">Optional ack URL for the POS.</param>
        /// <param name="isPersistent">Whether the payment is persistent.</param>
        /// <param name="isPreVerified">Whether the payment is verified upon creation.</param>
        public async Task<PaymentRequest> CreatePaymentRequest(
            Pos pointOfService,
            int amount,
            Filter filter,
            string nonce = null,
            string ackUrlPocket = null,
            string ackUrlPos = null,
            bool isPersistent = false,
            bool isPreVerified = false
        ) {
            var otc = Guid.NewGuid();
            var password = Random.GeneratePassword(DefaultAutogeneratedPasswordLength);

            var payRequest = new PaymentRequest {
                Otc = otc,
                Amount = amount,
                Filter = filter,
                CreatedAt = DateTime.UtcNow,
                Verified = isPreVerified,
                IsPersistent = isPersistent,
                PosId = pointOfService.Id,
                Nonce = nonce ?? string.Concat(pointOfService.Id, Guid.NewGuid()),
                Password = password,
                AckUrlPocket = ackUrlPocket,
                AckUrlPos = ackUrlPos,
            };
            await PaymentRequestCollection.InsertOneAsync(payRequest);

            return payRequest;
        }

    }

}
